デファクトは ESLint + Prettier + Jest


◆Linter: ESLint
$ pnpm add -D eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin
$ pnpm eslint --init
($ npx eslint --init)

.eslintrc.json
```
{
    "env": {
        "es2021": true 
        // "node": true, 
        // "browser": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "sourceType": "module",
        "project": "./tsconfig.json"
    },
    "plugins": [
        "@typescript-eslint"
    ],
    "rules": {
        "@typescript-eslint/no-explicit-any": 1,
        "@typescript-eslint/no-non-null-assertion": 1
    },
    "root": true
}
```

VS Code拡張のESLintは入れておくに越したことはない


◆Formatter: Prettier
$ pnpm add -D prettier
$ echo {} >.prettierrc.json

.vscode/settings.json
```
{
 "editor.formatOnSave": true,
 "editor.defaultFormatter": "esbenp.prettier-vscode"
}
```


◆ESLint + Prettier の共存(競合回避)
$ pnpm add -D eslint-config-prettier
.eslintrc.json の extends の末尾(最優先)に prettier を加えることで競合回避ができるようになる

・package.json
```
// Lint & Formatして強制上書きする
  "scripts": {
    "lint-fix": "eslint --cache --fix src/ && prettier --write src/"
  },
```


◆Tester: Jest
$ pnpm add -D pnpm add jest ts-jest @types/jest
$ pnpm ts-jest config:init
$ pnpm run test


◆Tailwind ESLinter
$ pnpm add -D eslint-plugin-tailwindcss

.eslintrc.json
```
{
 "extends": [
   "next",
   "next/core-web-vitals",
   "plugin:tailwindcss/recommended" ★ 
 ],
 "plugins": ["tailwindcss"] ★ 
}
```


◆参考
https://zenn.dev/sumiren/articles/97e19ebcce8197
https://zuma-lab.com/posts/eslint-prettier-settings

[EOF]


$ npm install highlight.js
$ npm install @azure/openai

